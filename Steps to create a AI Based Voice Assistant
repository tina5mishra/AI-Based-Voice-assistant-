
4.1: Creating Voice Assistant using python (Steps)





 
 


 What Is Voice-Id?	








def speak(audio):
engine.say(audio)
    engine.runAndWait()
engine.runAndWait() #Without this command, the speech will not be audible to us.


4.1.2: Creating Our main() function:
Now, we will create a main() function, and inside this main() Function, we will call our speak function.
if    name =="   main__" :
speak("good morning")
Fig.4.6
 
4.1.3: Defining Greet Function:
Now, we are going to make a Greet() function, that will make our AI ASSISTANT wish or greet the user according to the time of computer or pc. To provide current or live time to A.I., we need to import a module called datetime. Import this module to your program, by:
import datetime


Now, let's start defining the greet() function:
def greet():
    hrs = int(datetime.datetime.now().hour)
    if hrs < 12:
        speak("good morning ")
    elif 12 < hrs < 18:
        speak("good afternoon")
    elif hrs > 18:
        speak("good evening")


Here, we have stored the integer value of the current hour or time into a variable named hour. Now, we will use this hour value inside an if-else loop.

4.1.4: Defining getcommand Function:
The next most important thing for our A.I. assistant is that it should be able to take command with the help of the microphone of the user's system. So, now we will make a getcommand() function.  With the help of the takeCommand() function, our A.I. assistant will be able to return a string output by taking microphone input from the user.
 Before defining the takeCommand() function, we need to install a module called Speech Recognition. Install this module by: 
pip install speechRecognition


After successfully installing this module, import this module into the program by writing an import statement.
import speechRecognition as sr


Let's start coding the getcommand() function : 

def getcommand():
    r = sr.Recognizer()
    with sr.Microphone() as source:
        print("listening...")
        r.pause_threshold = 1
        audio = r.listen(source)




We have successfully created our getcommand() function. Now we are going to add a try and except block to our program to handle errors effectively.

  try:
            print("Recognizing...")
            query = r.recognize_google(audio, language='en-us')

            print(f"User said: {query}\n")

        except:

            print("Say that again please...")
            return "None"
        return query



4.1.5: Defining  Jokes Function:
Here our AI ASSISTANT will tell us a joke . If user want to Entertain. It give us exicting joke you will laugh definitely.

def jokes():
    joke = pyjokes.get_joke()
    print(joke)
    speak(joke)




We have successfully created our jokes function. Now we are going to add a try and except block to our program to handle errors effectively.
4.1.6: Defining  Date Function:
Here our AI assistant will able to give information about date in the format of month year and day .

def date_():
    year = int(datetime.datetime.now().year)
    month = int(datetime.datetime.now().month)
    day = int(datetime.datetime.now().day)
    speak("the current date is")
    speak(day)
    speak(month)
    speak(year)


4.1.7: Defining Time Function:
  def time():
    speak("current time is")
    speak(datetime.datetime.now().strftime("%H:%M:%S"))




In the above, code with are using datetime() function and storing the current or live of the system into a variable called strTime. After storing the time in strTime, we are passing this variable as an argument in speak function. Now, the time string will be converted into the speech.
4.1.8: Defining mail function :
Now, we will create a mail() function, which will help us to send emails to one or more than one recipients.
def mail(to, content):
    server = smtplib.SMTP('smtp.gmail.com', 587)
    server.ehlo()
    server.starttls()
    server.login('useremail@gmail.com', 'your-password')
    server.mail('useremail@gmail.com', to, content)
    server.close()

In the above code, we are using the SMTP module, which we have already discussed above.
Note: Do not forget to 'enable the less secure apps' feature in your Gmail account. Otherwise, the sendEmail function will not work properly.
Calling mail() function inside the main() function:
    
4.1.9: Coding logic of AI
 Now, we will develop logics for different commands such as Wikipedia searches, playing music, etc.
 Defining Task 1: To search something on Wikipedia 
 To do Wikipedia searches, we need to install and import the Wikipedia module into our program. Type the below command to install the Wikipedia module:
pip install wikipedia
Fig.4.13

 After successfully installing the Wikipedia module, import it into the program by writing an import statement.

if __name__ == "__main__":
    print("Hii!")
    wishme()
    speak("Hello User this is AI SATT Assistant. ow may i help u")

      # date_()
    while True:
        query = getcommand().lower()
        if "open notepad" in query:
            path = "C:\\Windows\\System32\\notepad.exe"
            os.startfile(path)
        elif "open facebook" in query:
            wb.open("www.facebook.com")
        elif 'wikipedia' in query:
            speak("searching wikipedia...")
            query = query.replace("wikipedia", "")
            results = wikipedia.summary(query, sentences=1)
            speak("according to wikipedia")
            print(results)
            speak(results)



In the above code, we have used an if statement to check whether Wikipedia is in the search query of the user or not. If Wikipedia is found in the user's search query, then two sentences from the summary of the Wikipedia page will be converted to speech with the help of speak function.
 Defining Task 2: To open YouTube site in a web-browser
 To open any website, we need to import a module called web-browser. It is an in-built module, and we do not need to install it with pip statement, we can directly import it into our program by writing an import statement.
     elif "open youtube" in query:
            wb.open("www.youtube.com")


Here, we are using the elif loop to check whether the YouTube is in the query of the user or not. Let' suppose, the user gives command as "AI ASSISTANT open you tube." So, open YouTube will be in the user's query, and the elif condition will be true.
 Defining Task 3: To open Google site in a web-browser
elif "google" in query:
            speak("what you want me to google")
            cm = getcommand().lower()
            wb.open(f"{cm}")




We are opening Google in a web-browser by applying the same logic that we used to open YouTube. 
 Defining Task 4: To play music 
To play music, we need to import a module called OS. Import this module directly with an import statement.
elif "play music" in query:
            location = 'D:\\mobile backup\\Gym song'
            songs = os.listdir(location)
            print(songs,end="\n")
            x= random.randint(0, (len(songs)-1))
            print(x)
            os.startfile(os.path.join(location, songs[x]))




In the above code, we first opened our music directory and then listed all the songs present in the directory with the help of the OS module. With the help of os.starfile, you can play any song of your choice. I am playing the first song in the directory. However, you can also play a random song with the help of a random module. Every time you command to play music, J.A.R.V.I.S. will play any random song from the song directory.
 Defining Task 5: To know the current time
  elif "time" in query:
            time()




In the above, code with are using datetime() function and storing the current or live of the system into a variable called strTime. After storing the time in strTime, we are passing this variable as an argument in speak function. Now, the time string will be converted into the speech.
Defining Task 6: To open the VS Code Program
 
        elif "visual code" in query:
            path = "C:\\Users\\Anshu\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe"
            os.startfile(path)



To open the VS Code or any other application, we need the code path of the application.
 Steps to get the code path of the application:
Step 1: Open the file location.
Step 2: Right-click on the application and click on properties.
Step 3: Copy the target from the target section.
After copying the target of the application, save the target into a variable. Here, I am saving the target into a variable called codePath, and then we are using the os module to open the application.
Defining Task 7: To mail
To send an email, we need to import a module called smtplib.
What is smtplib?
•	Simple Mail Transfer Protocol (SMTP) is a protocol that allows us to send emails and to route emails between mail servers. An instance method called mail is present in the SMTP module. This instance method allows us to send an email.  It takes 3 parameters:
•	The sender: Email address of the sender.
•	The receiver: Email of the receiver.
•	The message: A string message which needs to be sent to one or more than one recipient.
Now, we will create a mail() function, which will help us to send emails to one or more than one recipients.
elif 'email to user' in query:
            try:
                speak("What should I say?")
                content = getcommand()
                to = "useryourEmail@gmail.com"
                sendEmail(to, content)
                speak("Email has been sent!")



In the above code, we are using the SMTP module, which we have already discussed above.
Note: Do not forget to 'enable the less secure apps' feature in your Gmail account. Otherwise, the sendEmail function will not work properly.
Calling sendEmail() function inside the main() function:    
 except Exception as e:
                print(e)
                speak("Sorry my friend. I am not able to send this email")

   


We are using the try and except block to handle any possible error that can occur while sending mail.
Defining Task 8: To Remember 
This is used for to remember things . our AI ASSISTANT  can rember any thing if you said that remember .

        elif "remember that" in query:
            speak("what should i remember")
            notes = getcommand()
            speak(f"you said that {notes}")
            remember = open("text.txt", "w")
            remember.write(notes)
            remember.close()

        elif "remember anything" in query:
            remember = open("text.txt", "r")
            speak(f"you once said that remember AI Assistant {remember.read()}")
            print(remember.read())
            remember.close()

						
Defining Task 9: Tell Us a Joke
This task is used for entertainment purpose.








Defining Task 10: to open facebook
This task is used for opening of facebook page 
        elif "open facebook" in query:
            wb.open("www.facebook.com")


Defining Task 11: to open notepad
This task is used to open notepad to note any required information.
                while True:
        query = getcommand().lower()
        if "open notepad" in query:
            path = "C:\\Windows\\System32\\notepad.exe"
            os.startfile(path)




Defining Task 11: To shutdown or restart computer
This task is used to automatically shutdown,restart,or logout  the window .
        elif 'logout' in query:
            os.system("shutdown - 1")

        elif 'shutdown' in query:
            os.system("shutdown /s /t 1")

        elif 'restart' in query:
            os.system("shutdown /r /t 1")

